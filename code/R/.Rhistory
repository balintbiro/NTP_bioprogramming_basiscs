---
title: "R Notebook"
output: github_notebook
---
```{r}
#declare a variable
mylist <- list(12,'YES',TRUE,'12',c(1,2,3))
mylist
```
```{r}
#iterate over the items of a previously declared variable with a for loop
for (element in mylist){
print(element)
}
```
```{r}
#add up elements in a list
mylist <- list(1,2,3,4,5,6)
sum_of_mylist <- 0
for (number in mylist){
sum_of_mylist <- sum_of_mylist+number
}
sum_of_mylist
```
#add up elements in a list
mylist <- list(1,2,3,4,5,6)
sum_of_mylist <- 0
for (number in mylist){
sum_of_mylist <- sum_of_mylist+number
}
sum_of_mylist
#while loop
tracker <- 0
print(tracker)
while (tracker<10){
print(tracker)
}
tracker <- +1
while (tracker<10){
print(tracker)
tracker <- +1
}
tracker+1
while (tracker<10){
print(tracker)
tracker+1
}
tracker <- tracker+1
while (tracker<10){
print(tracker)
tracker <- tracker+1
}
#while loop, in the head of the loop you have to declare a condition. While the condition is TRUE, the loop will iterate. AKA forward testing loop since the controlling mechanism will check the condition in the head of the loop and if it is FALSE it wont execute the body of the loop
tracker <- 0
while (tracker<10){
print(tracker)
tracker <- tracker+1
}
#while loop, in the head of the loop you have to declare a condition. While the condition is TRUE, the loop will iterate. AKA forward testing loop since the controlling mechanism will check the condition in the head of the loop and if it is FALSE it wont execute the body of the loop
tracker <- 0
while (tracker<10){
print(tracker)
tracker <- tracker+1
}
#repeat loop. The very important difference between repeat and while, that the controlling mechanism will execute the body of the repeat loop once even if the condition is false since its at the end of the body. But in case of while loop if the condition in the head of the loop is FALSE, the controlling mechanism wont enter the body of the loop
tracker <- 0
repeat{
print(tracker)
tracker <- tracker+1
if (tracker>10){
break
}
}
#repeat loop. The very important difference between repeat and while, that the controlling mechanism will execute the body of the repeat loop once even if the condition is false since its at the end of the body. But in case of while loop if the condition in the head of the loop is FALSE, the controlling mechanism wont enter the body of the loop
tracker <- 0
repeat{
print(tracker)
tracker <- tracker+1
if (tracker>0){
break
}
}
repeat{#it executed the body once!
print(tracker)
tracker <- tracker+1
if (tracker>0){
break
}
}
#repeat loop. The very important difference between repeat and while, that the program will execute the body of the repeat loop once even if the condition is false since its at the end of the body. But in case of while loop if the condition in the head of the loop is FALSE, the program wont enter the body of the loop
tracker <- 0
repeat{#it executed the body once!
print(tracker)
tracker <- tracker+1
if (tracker>0){
break
}
}
print(i)
for (i in 1:9){
print(i)
}
print(i)
if tracker>5{
for (i in 1:9){
tracker <- tracker+i
print(i)
if tracker>5{
for (i in 1:9){
tracker <- tracker+i
print(i)
if (tracker>5){
break
}
}
#controlling mechanism <- break
tracker <- 0
for (i in 1:9){
tracker <- tracker+i
print(i)
if (tracker>5){
break
}
}
#controlling mechanism <- break
tracker <- 0
for (i in 1:9){
if (tracker>5){
break
}
tracker <- tracker+i
print(i)
}
1:9
for (i in 1:9){
tracker <- tracker+i
print(i)
}
#controlling mechanism <- break
tracker <- 0
for (i in 1:9){
if (tracker>5){
break
}
tracker <- tracker+i
print(i)
}
print(i)
for (i in mylist){
print(i)
}
#controlling mechanism <- break
mylist <- c(1,2,3,'a',4,5,6,'b',7,8)
for (i in mylist){
print(i)
}
print(as.numeric(i))
for (i in mylist){
print(as.numeric(i))
}
#add new element to a list
mylist <- list(1,'a',123.2,TRUE,c(12,3,4))
mylist
#add new element to a list
append(mylist,'new_element')
mylist
#add new element to a list
mylist <- append(mylist,'new_element')
mylist
print(i+2)
for (i in mylist){
print(i+2)
}
for (i in mylist){
if (is.character(i)){
sprintf('%s is character, so cannot use in math and Im gonna jump it over!',i)
next
}
print(i+2)
}
#controlling mechanism <- next
mylist <- c(1,2,3,'a',4,5,6,'b',7,8)
for (i in mylist){
if (is.character(i)){
sprintf('%s is character, so cannot use in math and Im gonna jump it over!',i)
next
}
print(i+2)
}
#controlling mechanism <- next
mylist <- c(1,2,3,'a',4,5,6,'b',7,8)
for (i in mylist){
if (is.character(i)){
sprintf('%s is character, so cannot use in math and Im gonna jump it over!',i)
next
}
print(i+2)
}
#controlling mechanism <- next
mylist <- c(1,2,3,'a',4,5,6,'b',7,8)
for (i in mylist){
if (is.character(i)){
sprintf('%s is character, so cannot use in math and Im gonna jump it over!',i)
next
}
print(i+2)
}
mylist
for (i in mylist){
if (is.character(i)){
sprintf('%s is character, so cannot use in math and Im gonna jump it over!',%i)
sprintf('/%s/ is character, so cannot use in math and Im gonna jump it over!',i)
for (i in mylist){
if (is.character(i)){
sprintf('/%s/ is character, so cannot use in math and Im gonna jump it over!',i)
next
}
print(i+2)
}
#controlling mechanism <- next
mylist <- c(1,2,3,'a',4,5,6,'b',7,8)
for (i in mylist){
if (is.character(i)){
sprintf('%s is character, so cannot use in math and Im gonna jump it over!',i)
next
}
print(as.numeric(i)+2)
}
mylist
for (i in mylist){
if (is.character(i)){
sprintf('%s is character, so cannot use in math and Im gonna jump it over!',i)
next
}
print(as.numeric(i)+2)
}
mylist
#controlling mechanism <- next
mylist <- list(1,2,3,'a',4,5,6,'b',7,8)
for (i in mylist){
if (is.character(i)){
sprintf('%s is character, so cannot use in math and Im gonna jump it over!',i)
next
}
print(as.numeric(i)+2)
}
#controlling mechanism <- next
mylist <- list(1,2,3,'a',4,5,6,'b',7,8)
letters <- list('a','b')
for (i in mylist){
if (i %in% letters){
sprintf('%s is character, so cannot use in math and Im gonna jump it over!',i)
next
}
print(as.numeric(i)+2)
}
for (i in mylist){
if (i %in% letters){
print('Character, so cannot use in math and Im gonna jump it over!')
next
}
print(as.numeric(i)+2)
}
#controlling mechanism <- next
mylist <- list(1,2,3,'a',4,5,6,'b',7,8)
letters <- list('a','b')
for (i in mylist){
if (i %in% letters){
print('Character, so cannot use in math and Im gonna jump it over!')
next
}
print(as.numeric(i)+2)
}
for (i in mylist){
if (i %in% letters){
print('Character, so cannot use in math and Im gonna jump it over!')
}
print(as.numeric(i)+2)
}
for (i in mylist){
if (i %in% letters){
print('Character, so cannot use in math and Im gonna jump it over!')
next
}
print(as.numeric(i)+2)
}
#declare a variable
mylist <- list(12,'YES',TRUE,'12',c(1,2,3))
mylist
#writing text file line by line
lines <- c('>header\n','AACTAGCTAGGGCTAGGCTTGGACTG')
myfile <- '../../results.txt_R.txt'
writeLines(lines, myfile)
myfile <- '../../results/txt_R.txt'
writeLines(lines, myfile)
print('File was created!')
#writing text file (FASTA) line by line
lines <- c('>header\n','AACTAGCTAGGGCTAGGCTTGGACTG')#variable with lines
myfile <- '../../results/txt_R.fa'#relative filepath
writeLines(lines, myfile)
print('File was created!')
#writing text file (FASTA) line by line
lines <- c('>header\n','AACTAGCTAGGGCTAGGCTTGGACTG')#variable with lines
myfile <- '../../results/myfasta.fa'#relative filepath
writeLines(lines, myfile)
print('File was created!')
#reading text file line by line
myfile <- '../../results/myfasta.fa'#relative filepath
lines <- readLines(myfile)
lines
lines <- as.vector(readLines(myfile))
lines
lines <- readLines(myfile)
lines
lines <- readLines(file.choose())
lines
#read text file
myfile <- '../../results/myfasta.fa'#relative filepath
lines <- readtext(myfile)
#read text file
library(readtext)
#read text file
install.packages('readtext')
library(readtext)
myfile <- '../../results/myfasta.fa'#relative filepath
lines <- readtext(myfile)
#write simple text file
lines <- c('>header\n','AACTAGCTAGGGCTAGGCTTGGACTG')#variable with lines
myfile <- '../../results/mytext.txt'#relative filepath
writeLines(lines, myfile)
myfile <- '../../results/mytext.txt'#relative filepath
lines <- readtext(myfile)
lines
#writing text file (FASTA) line by line
lines <- c('>header','AACTAGCTAGGGCTAGGCTTGGACTG')#variable with lines
myfile <- '../../results/myfasta.fa'#relative filepath
writeLines(lines, myfile)
print('File was created!')
#writing text file (FASTA) line by line
lines <- c('>header','AACTAGCTAGGGCTAGGCTTGGACTG')#variable with lines
myfile <- '../../results/myfasta.fa'#relative filepath
writeLines(lines, myfile)
print('File was created!')
```{r}
#reading text file line by line
myfile <- '../../results/myfasta.fa'#relative filepath
lines <- readLines(myfile)
lines
#reading text file line by line
lines <- readLines(file.choose())#very nifty function is file.choose() which
#will offer the available files
lines
#write simple text file
lines <- c('>header\n','AACTAGCTAGGGCTAGGCTTGGACTG')#variable with lines
myfile <- '../../results/mytext.txt'#relative filepath
writeLines(lines, myfile)
myfile <- '../../results/mytext.txt'#relative filepath
lines <- readtext(myfile)#readtext module accepts only file with txt extension
lines
lines['mytext.txt']
#read fasta file
myfile <- '../../results/myfasta.fa'
read.fasta(myfile)
#read fasta file
library(seqinl)
detach("package:readtext", unload = TRUE)
library(readtext)
detach("package:readtext", unload = TRUE)
library(readtext)
#read text file
uninstall.packages('readtext')#package installation
detach("package:readtext", unload = TRUE)
library(readtext)
remove.packages("readtext")
library(readtext)#import required modules
library(readtext)#import required modules
myfile <- '../../results/mytext.txt'#relative filepath
lines <- readtext(myfile)#readtext module accepts only file with txt extension
lines
